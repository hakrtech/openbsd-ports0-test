#!/usr/bin/perl

# $OpenBSD: check-lib-depends,v 1.23 2011/11/27 13:39:11 espie Exp $
# Copyright (c) 2004-2010 Marc Espie <espie@openbsd.org>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;
my $ports1;
use FindBin;
BEGIN {
	$ports1 = $ENV{PORTSDIR} || '/usr/ports';
}
use lib ("$ports1/infrastructure/lib", "$FindBin::Bin/../lib");

use File::Spec;
use OpenBSD::PackingList;
use OpenBSD::SharedLibs;
use OpenBSD::LibSpec;
use OpenBSD::Temp;
use OpenBSD::AddCreateDelete;
use OpenBSD::Getopt;
use OpenBSD::FileSource;
use OpenBSD::Recorder;
use OpenBSD::Issue;

package MyFile;
our @ISA = qw(OpenBSD::PackingElement::FileBase);

sub fullname
{
	my $self = shift;
	return $self->{name};
}

package OpenBSD::PackingElement;
sub record_needed_libs
{
}

sub find_libs
{
}

sub register_libs
{
}

sub depwalk
{
}

package OpenBSD::PackingElement::Wantlib;
sub register_libs
{
	my ($item, $t) = @_;
	my $name = $item->{name};
	$name =~ s/^(.*\/)?(.*)\.(\d+)\.\d+$/$2.$3/;
	$t->{$name} = 1;
}

package OpenBSD::PackingElement::Lib;

sub register_libs
{
	my ($item, $t) = @_;
	if ($item->fullname =~ m/^(.*\/)?lib(.*)\.so\.(\d+)\.\d+$/) {
		$t->{"$2.$3"} = 2;
	}
}

package OpenBSD::PackingElement::FileBase;
sub find_libs
{
	my ($item, $dest, $special) = @_;
	my $fullname = $item->fullname;
	if (defined $special->{$fullname}) {
		for my $lib (@{$special->{$fullname}{libs}}) {
			$dest->record($lib, $fullname);
		}
	}
}

sub record_needed_libs
{
	my ($item, $state) = @_;

	my $fullname = File::Spec->canonpath($item->fullname);

	my $linux_bin = 0;
	if ($fullname =~ m,^/usr/local/emul/(?:redhat|fedora)/,) {
		$linux_bin = 1;
	}
	if ($linux_bin || $item->{symlink} || $item->{link}) {
		$state->{runner}->{source}->skip($item);
	} else {
		$state->{runner}->retrieve_and_scan_binaries($item, $fullname);
	}
}

package OpenBSD::PackingElement::Dependency;

sub depwalk
{
	my ($self, $h) = @_;
	$h->{$self->{def}} = $self->{pkgpath};
}

package Runner;
sub new
{
	my ($class, $state) = @_;
	bless {state => $state}, $class;
}

sub set_source
{
	my ($self, $source) = @_;
	$self->{source} = $source;
}

sub fatal
{
	my $self = shift;
	$self->{state}->fatal(@_);
}

sub dest
{
	my $self = shift;
	return $self->{state}->{recorder};
}

sub start
{
	my ($self, @names) = @_;

	unless (open(my $cmd, '-|')) {
		chdir($self->{source}->directory) or 
		    $self->fatal("Bad directory #1: #2", 
		    	$self->{source}->directory, $!);
		open(STDERR, '>', '/dev/null');
		$self->exec(@names) or 
		    $self->fatal("exec #1: #2", $self->command, $!);
	} else {
		return $cmd;
	}
}

sub record_libs
{
	my ($self, $fullname, @libs) = @_;
	for my $lib (@libs) {
		# don't look for modules
		next if $lib =~ m/\.so$/;
		$self->dest->record($lib, $fullname);
	}
}

sub retrieve_and_scan_binaries
{
	my ($self, $item, $fullname) = @_;

	my $n = $self->{source}->retrieve($self->{state}, $item);
	# make sure to turn into a relative path
	$n =~ s/^\/*//;

	$self->scan_binary($item, $fullname, $n);
}

package Runner::Objdump;
our @ISA = qw(Runner);

sub command() { 'objdump' }

sub exec
{
	my ($self, @names) = @_;
	exec($self->command, '-p', @names);
}

sub parse
{
	my ($self, $cmd, $names) = @_;
	my $fullname;
	my @l = ();
	my $linux_binary = 0;
	while (my $line = <$cmd>) {
		chomp;
		if ($line =~ m/^(.*)\:\s+file format/) {
			my $k = $1;
			$self->record_libs($fullname, @l) unless $linux_binary;
			$linux_binary = 0;
			@l = ();
			if (defined $names->{$k}) {
				$fullname = $names->{$k};
			}
		}
		if ($line =~ m/^\s+NEEDED\s+(.*?)\s*$/) {
			my $lib = $1;
			push(@l, $lib);
			# detect linux binaries
			if ($lib eq 'libc.so.6') {
				$linux_binary = 1;
			}
		} elsif ($line =~ m/^\s+RPATH\s+(.*)\s*$/) {
			my $p = {};
			for my $path (split /\:/, $1) {
				next if $path eq '/usr/local/lib';
				next if $path eq '/usr/X11R6/lib';
				next if $path eq '/usr/lib';
				$p->{$path} = 1;
			}
			for my $path (keys %$p) {
				$self->dest->record_rpath($path, $fullname);
			}
		}
	}
	$self->record_libs($fullname, @l) unless $linux_binary;
}

sub scan_binary
{
	my ($self, $item, $fullname, $n) = @_;

	$self->{names}{$n} = $fullname;
	push(@{$self->{cleanup}}, $item);

	if (@{$self->{cleanup}} >= 1000) {
		$self->finish_scanning;
	}
}

sub finish_scanning
{
	my $self = shift;

	if (defined $self->{names}) {
		my $cmd = $self->start(sort keys %{$self->{names}});
		$self->parse($cmd, $self->{names});
		close($cmd);
		delete $self->{names};
	}
	if (defined $self->{cleanup}) {
		for my $item (@{$self->{cleanup}}) {
			$self->{source}->clean($item);
		}
		delete $self->{cleanup};
	}
}

package Runner::Ldd;
our @ISA = qw(Ldd);

sub command() { 'ldd' }

sub exec
{
	my ($self, @names) = @_;
	if (@names > 1) {
		$self->fatal("Can't run ldd over several names");
	}
	exec($self->command, '-f', "NEEDED lib%o.so.%m.%n\n", @names);
}

sub parse
{
	my ($self, $cmd, $fullname) = @_;
	my @l = ();
	my $linux_binary = 0;
	while (my $line = <$cmd>) {
		chomp;
		if ($line =~ m/^\s+NEEDED\s+(.*?)\s*$/) {
			my $lib = $1;
			push(@l, $lib);
			# detect linux binaries
			if ($lib eq 'libc.so.6') {
				$linux_binary = 1;
			}
		}
	}
	$self->record_libs($fullname, @l) unless $linux_binary;
}

sub scan_binary
{
	my ($self, $item, $fullname, $n) = @_;
	my $cmd = $self->start($n);

	$self->parse($cmd, $fullname);
	close($cmd);
	$self->{source}->clean($item);
}

sub finish_scanning
{
}

package CheckLibDepends::State;
our @ISA = qw(OpenBSD::AddCreateDelete::State);


sub handle_options
{
	my $state = shift;

	$state->SUPER::handle_options('od:fB:qs:O:',
		'[-fomqx] [-B destdir] [-d pkgrepo] [-O dest] [-s source]');

	$state->{destdir} = $state->opt('B');
	$state->{dest} = $state->opt('O');
	$state->{source} = $state->opt('s');
	$state->{full} = $state->opt('f');
	$state->{repository} = $state->opt('d');
	if ($state->opt('o')) {
		$state->{runner} = Runner::Ldd->new($state);
	} else {
		$state->{runner} = Runner::Objdump->new($state);
	}
	$state->{quiet} = $state->opt('q');
}

sub init
{
	my $self = shift;
	$self->{errors} = 0;
	$self->{recorder} = OpenBSD::DumpRecorder->new;
	$self->SUPER::init(@_);
}

sub context
{
	my ($self, $pkgname) = @_;
	$self->{context} = $pkgname;
}

sub error
{
	my $state = shift;
	$state->{errors}++;
	$state->say_with_context(@_);
}

sub say_with_context
{
	my $state = shift;
	if ($state->{context}) {
		$state->say("\n#1:", $state->{context});
		undef $state->{context};
	}
	$state->say(@_);
}

sub set_context
{
	my ($state, $plist) = @_;
	my $pkgname = $plist->pkgname;
	if ($plist->fullpkgpath) {
		$state->context($pkgname."(".$plist->fullpkgpath.")");
	} else {
		$state->context($pkgname);
	}
}

package CheckLibDepends;

use OpenBSD::PackageInfo;
use File::Path;
use File::Find;

my $dependencies = {};

sub register_dependencies
{
	my $plist = shift;
	my $pkgname = $plist->pkgname;
	my $h = {};
	$dependencies->{$pkgname} = $h;
	$plist->depwalk($h);
}

sub get_plist
{
	my ($self, $state, $pkgname, $pkgpath) = @_;

	# try physical package
	if (defined $state->{repository}) {
		my $location = "$state->{repository}/$pkgname.tgz";

		my $true_package = $state->repo->find($location);
		if ($true_package) {
			my $dir = $true_package->info;
			if (-d $dir) {
				my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
				$true_package->close;
				rmtree($dir);
				return $plist;
			}
		}
	}
	# ask the ports tree
	$state->say("Asking ports for dependency #1(#2)", $pkgname, $pkgpath);
	my $portsdir = $ENV{PORTSDIR} || "/usr/ports";
	my $make = $ENV{MAKE} || "make";
	open my $fh, "cd $portsdir && env -i SUBDIR=$pkgpath FULLPATH=Yes ECHO_MSG=: make print-plist-libs-with-depends wantlib_args=no-wantlib-args|" or return undef;
	my $plist = OpenBSD::PackingList->read($fh);
	close $fh;
	return $plist;
}

sub handle_dependency
{
	my ($self, $state, $pkgname, $pkgpath) = @_;
	my $plist = $self->get_plist($state, $pkgname, $pkgpath);

	if (!defined $plist || !defined $plist->pkgname) {
		$state->errsay("Error: can't solve dependency for #1(#2)",
		    $pkgname, $pkgpath);
		return;
	}

	if ($plist->pkgname ne $pkgname) {
		delete $dependencies->{$pkgname};
		for my $p (keys %$dependencies) {
			if ($dependencies->{$p}->{$pkgname}) {
				$dependencies->{$p}->{$plist->pkgname} =
				    $dependencies->{$p}->{$pkgname};
				delete $dependencies->{$p}->{$pkgname};
			}
		}
	}

	register_dependencies($plist);
	OpenBSD::SharedLibs::add_libs_from_plist($plist, $state);

	return $plist->pkgname;
}

sub lookup_library
{
	my ($dir, $spec) = @_;
	my $libspec = OpenBSD::LibSpec->from_string($spec);
	my $r = OpenBSD::SharedLibs::lookup_libspec($dir, $libspec);
	if (!defined $r) {
		return ();
	} else {
		return map {$_->origin} @$r;
	}
}

sub report_lib_issue
{
	my ($self, $state, $plist, $lib, $binary) = @_;

	OpenBSD::SharedLibs::add_libs_from_system('/', $state);
	my $libspec = "$lib.0";
	my $want = $lib;
	$want =~ s/\.\d+$//;
	for my $dir (qw(/usr /usr/X11R6)) {
		my @r = lookup_library($dir, $libspec);
		if (grep { $_ eq 'system' } @r) {
			return OpenBSD::Issue::SystemLib->new($lib, $binary);
		}
	}

	while (my ($p, $pkgpath) = each %{$dependencies->{$plist->pkgname}}) {
		next if defined $dependencies->{$p};
		$self->handle_dependency($state, $p, $pkgpath);
	}

	my @r = lookup_library('/usr/local', $libspec);
	if (@r > 0) {
		for my $p (@r) {
			if (defined $dependencies->{$plist->pkgname}->{$p}) {
				return OpenBSD::Issue::DirectDependency->new($lib, $binary, $p);
			}
		}
	}
	# okay, let's walk for WANTLIB
	my @todo = %{$dependencies->{$plist->pkgname}};
	my $done = {};
	while (@todo >= 2) {
		my $path = pop @todo;
		my $dep = pop @todo;
		next if $done->{$dep};
		$done->{$dep} = 1;
		$dep = $self->handle_dependency($state, $dep, $path)
		    	unless defined $dependencies->{$dep};
		next if !defined $dep;
		$done->{$dep} = 1;
		push(@todo, %{$dependencies->{$dep}});
	}
	@r = lookup_library(OpenBSD::Paths->localbase, $libspec);
	for my $p (@r) {
		if (defined $done->{$p}) {
			return OpenBSD::Issue::IndirectDependency->new($lib, $binary, $p);
		}
	}
	return OpenBSD::Issue::NotReachable->new($lib,, $binary, @r);
}

sub print_list
{
	my ($self, $state, $head, $h) = @_;

	my $line = "";
	for my $k (sort keys %$h) {
		if (length $line > 50) {
			$state->say_with_context("#1#2", $head, $line);
			$line = "";
		}
		$line .= ' '.$k;
	}
	if ($line ne '') {
		$state->say_with_context("#1#2", $head, $line);
	}
}

sub scan_package
{
	my ($self, $state, $plist, $source) = @_;
	$state->{runner}->set_source($source);
	$plist->record_needed_libs($state);
	$state->{runner}->finish_scanning;
}

sub analyze 
{
	my ($self, $state, $plist) = @_;

	my $pkgname = $plist->pkgname;
	my $needed_libs = $state->{full} ? OpenBSD::AllRecorder->new : 
	    OpenBSD::SimpleRecorder->new;
	my $has_libs = {};
	$plist->find_libs($needed_libs, $state->{recorder});
	$plist->register_libs($has_libs);

	if (!defined $dependencies->{$pkgname}) {
		register_dependencies($plist);
		OpenBSD::SharedLibs::add_libs_from_plist($plist, $state);
	}
	my $r = { wantlib => {}, libdepends => {}, wantlib2 => {} };
	for my $lib (sort $needed_libs->libs) {
		my $fullname = $needed_libs->binary($lib);
		if (!defined $has_libs->{$lib}) {
			my $issue = $self->report_lib_issue($state, $plist, 
			    $lib, $fullname);
			$state->error("#1", $issue->message);
			$issue->record_wantlib($r->{wantlib});
		} elsif ($has_libs->{$lib} == 1) {
			my $issue = $self->report_lib_issue($state, $plist, 
			    $lib, $fullname);
			if ($issue->not_reachable) {
				$state->error("#1", $issue->not_reachable);
			}
		}
		$has_libs->{$lib} = 2;
	}
	my $extra = {};
	for my $k (keys %$has_libs) {
		my $v = $has_libs->{$k};
		next if $v == 2;
		$extra->{$k} = 1;
	}
	unless ($state->{quiet} && keys %{$r->{wantlib}} == 0) {
		$self->print_list($state, "Extra: ", $extra);
	}
	$self->print_list($state, "WANTLIB +=", $r->{wantlib});
	if ($state->{full}) {
		$needed_libs->dump(\*STDOUT);
	}
}

sub do_pkg
{
	my ($self, $state, $pkgname) = @_;

	my $true_package = $state->repo->find($pkgname);
	return 0 unless $true_package;
	my $dir = $true_package->info;
	# twice read
	return 0 unless -d $dir;
	my $plist = OpenBSD::PackingList->fromfile($dir.CONTENTS);
	$state->set_context($plist);
	if ($state->{need_package}) {
		my $temp = OpenBSD::Temp->dir;
		$state->{recorder} = OpenBSD::DumpRecorder->new;
		$self->scan_package($state, $plist,
		    OpenBSD::PkgFileSource->new($true_package, $temp));
	}
	$self->analyze($state, $plist);
	$true_package->close;
	$true_package->wipe_info;
	$plist->forget;
	if ($state->{need_package}) {
		undef $state->{recorder};
	}
	return 1;
}

sub do_plist
{
	my ($self, $state) = @_;

	my $plist = OpenBSD::PackingList->read(\*STDIN);
	if (!defined $plist->{name}) {
		$state->error("Error reading plist");
		return;
	} else {
		$state->set_context($plist);
		$self->analyze($state, $plist);
	}
}

sub scan_directory
{
	my ($self, $state, $fs) = @_;

	my $source = OpenBSD::FsFileSource->new($fs);
	$state->{runner}->set_source($source);
	find({
		wanted => sub {
		    return if -l $_;
		    return unless -f _;
		    my $name = $_;
		    $name =~ s/^\Q$fs\E/\//;
		    # XXX hack FileBase object;
		    my $i = bless {name => $name}, "MyFile";
		    $i->record_needed_libs($state);
		},
		no_chdir => 1 }, $fs);
}

sub main
{
	my $self = shift;
	my $state = CheckLibDepends::State->new('check-lib-depends');
	$state->handle_options;
	# find files if we can
	if ($state->{source}) {
		$state->{recorder}->retrieve($state, $state->{source});
	} elsif ($state->{destdir}) {
		$self->scan_directory($state, $state->{destdir});
	} else {
		$state->{need_package} = 1;
	}
		
	if ($state->{dest}) {
		open my $fh, '>', $state->{dest} or 
		    $state->fatal("Can't write to #1: #2", 
			$state->{dest}, $!);
		$state->{recorder}->dump($fh);
		close $fh;
		exit(0);
	}

	if (@ARGV == 0) {
		$self->do_plist($state);
	} else {
		$state->progress->for_list("Scanning", \@ARGV,
		    sub {
			$self->do_pkg($state, shift);
		    });
	}

	exit($state->{errors} ? 1 : 0);
}

$OpenBSD::Temp::tempbase = "/tmp";
__PACKAGE__->main;
