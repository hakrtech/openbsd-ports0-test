$OpenBSD: patch-include_i3status_h,v 1.7 2012/10/09 17:12:31 jasper Exp $

- Default to acpitz(4) for temperature readings, instead of cpu(4).
  The acpitz(4) values are eventually used by the kernel to determine if the machine
  is getting too hot.

  Other devices can be used by setting 'path' in the config file to the sysctl(3)
  device node.

- Temperature sensors can now set a 'max_threshold' value to color the
  output red if exceeded.

--- include/i3status.h.orig	Wed Oct  3 13:44:44 2012
+++ include/i3status.h	Tue Oct  9 20:36:02 2012
@@ -27,14 +27,8 @@ enum { O_DZEN2, O_XMOBAR, O_I3BAR, O_NONE } output_for
 #define BATT_STATE "hw.acpi.battery.state"
 
 #elif defined(__OpenBSD__)
-/*
- * Due to the fact there are various ways to obtain a temperature reading, THERMAL_ZONE will need
- * to be adjustable enough for those situations. As it can either be hw.sensors.cpu%d.temp0, or
- * hw.sensors.acpitz%d.temp0 or even something different entirely within hw.sensors.%s.temp0.
- * XXX: For now just check cpu%d.temp0. Adjust this later.
- */
-#define THERMAL_ZONE "cpu%d"
-
+/* Default to acpitz(4) if no path is set. */
+#define THERMAL_ZONE "acpitz%d"
 #endif
 
 #if defined(__FreeBSD_kernel__) && defined(__GLIBC__)
@@ -143,7 +137,7 @@ void print_ddate(yajl_gen json_gen, char *buffer, cons
 const char *get_ip_addr();
 void print_wireless_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_run_watch(yajl_gen json_gen, char *buffer, const char *title, const char *pidfile, const char *format);
-void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format);
+void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format, int);
 void print_cpu_usage(yajl_gen json_gen, char *buffer, const char *format);
 void print_eth_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_load(yajl_gen json_gen, char *buffer, const char *format);
