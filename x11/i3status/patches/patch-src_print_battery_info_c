$OpenBSD: patch-src_print_battery_info_c,v 1.1.1.1 2012/05/02 07:37:10 jasper Exp $

Implement displaying battery status on OpenBSD (committed upstream).

--- src/print_battery_info.c.orig	Sun Apr 29 20:22:33 2012
+++ src/print_battery_info.c	Sun Apr 29 20:22:39 2012
@@ -13,6 +13,13 @@
 #include <sys/sysctl.h>
 #endif
 
+#if defined(__OpenBSD__)
+#include <sys/types.h>
+#include <sys/ioctl.h>
+#include <sys/fcntl.h>
+#include <machine/apmvar.h>
+#endif
+
 /*
  * Get battery information from /sys. Note that it uses the design capacity to
  * calculate the percentage, not the last full capacity, so you can see how
@@ -168,6 +175,57 @@ void print_battery_info(yajl_gen json_gen, char *buffe
                 (void)snprintf(remainingbuf, sizeof(remainingbuf), "%02dh%02d",
                                max(hours, 0), max(minutes, 0));
         }
+#elif defined(__OpenBSD__)
+	/*
+	 * We're using apm(4) here, which is the interface to acpi(4) on amd64/i386 and
+	 * the generic interface on macppc/sparc64/zaurus, instead of using sysctl(3) and
+	 * probing acpi(4) devices.
+	 */
+	struct apm_power_info apm_info;
+	int apm_fd, ac_status, charging;
+
+	apm_fd = open("/dev/apm", O_RDONLY);
+	if (apm_fd < 0) {
+		OUTPUT_FULL_TEXT("can't open /dev/apm");
+		return;
+	}
+	if (ioctl(apm_fd, APM_IOC_GETPOWER, &apm_info) < 0)
+		OUTPUT_FULL_TEXT("can't read power info");
+
+	close(apm_fd);
+
+	/* Don't bother to go further if there's no battery present. */
+	if ((apm_info.battery_state == APM_BATTERY_ABSENT) ||
+	    (apm_info.battery_state == APM_BATT_UNKNOWN)) {
+		OUTPUT_FULL_TEXT("No battery");
+		return;
+	}
+
+	switch(apm_info.ac_state) {
+	case APM_AC_OFF:
+		ac_status = CS_DISCHARGING;
+		break;
+	case APM_AC_ON:
+		ac_status = CS_CHARGING;
+		break;
+	default:
+		/* If we don't know what's going on, just assume we're discharging. */
+		ac_status = CS_DISCHARGING;
+		break;
+	}
+
+	(void)snprintf(statusbuf, sizeof(statusbuf), "%s",
+		       (ac_status == CS_CHARGING ? "CHR" :
+			(ac_status == CS_DISCHARGING ? "BAT" : "FULL")));
+
+        (void)snprintf(percentagebuf, sizeof(percentagebuf), "%02d%%", apm_info.battery_life);
+
+	/* Can't give a meaningful value for remaining minutes if we're charging. */
+	if (ac_status == CS_CHARGING)
+		charging = 1;
+
+	(void)snprintf(remainingbuf, sizeof(remainingbuf), (charging ? "%s" : "%d"),
+		       (charging ? "(CHR)" : apm_info.minutes_left));
 #endif
 
         for (walk = format; *walk != '\0'; walk++) {
