$OpenBSD: patch-src_gui_c,v 1.41 2014/03/18 06:50:18 dcoppa Exp $

Fix problem with remembered softvol not being loaded

Fix fullscreen mode hanging when control menu goes thru show/hide
(upstream svn revision r2469)

Tracker size adjustments so that it does not look wrong in gecko-mediaplayer
(upstream svn revision r2467)

--- src/gui.c.orig	Thu Mar 13 12:21:33 2014
+++ src/gui.c	Thu Mar 13 12:26:59 2014
@@ -1708,11 +1708,6 @@ gboolean set_volume(void *data)
         if (!(softvol || audio_device.type == AUDIO_TYPE_SOFTVOL)) {
             gm_audio_get_volume(&audio_device);
         }
-        if (pref_volume != -1) {
-            audio_device.volume = (gdouble) pref_volume / 100.0;
-            gmtk_media_player_set_volume(GMTK_MEDIA_PLAYER(media), audio_device.volume);
-            pref_volume = -1;
-        }
         gm_log(verbose, G_LOG_LEVEL_DEBUG, "data is null new volume is %f", audio_device.volume);
 #ifdef GTK2_12_ENABLED
         gtk_scale_button_set_value(GTK_SCALE_BUTTON(vol_slider), audio_device.volume);
@@ -4141,8 +4136,7 @@ void menuitem_fs_callback(GtkMenuItem * menuitem, void
             if (window_x < 170) {
                 gtk_widget_hide(GTK_WIDGET(tracker));
             }
-            gtk_widget_destroy(fs_window);
-            fs_window = NULL;
+            gtk_widget_hide(fs_window);
 
         }
         gtk_widget_show(menubar);
@@ -4201,21 +4195,22 @@ void menuitem_fs_callback(GtkMenuItem * menuitem, void
 
             gtk_window_fullscreen(GTK_WINDOW(window));
         } else {
-            fs_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
-            gtk_window_set_resizable(GTK_WINDOW(window), TRUE);
-            gtk_widget_add_events(fs_window, GDK_BUTTON_PRESS_MASK);
-            gtk_widget_add_events(fs_window, GDK_BUTTON_RELEASE_MASK);
-            gtk_widget_add_events(fs_window, GDK_KEY_PRESS_MASK);
-            gtk_widget_add_events(fs_window, GDK_KEY_RELEASE_MASK);
-            gtk_widget_add_events(fs_window, GDK_ENTER_NOTIFY_MASK);
-            gtk_widget_add_events(fs_window, GDK_LEAVE_NOTIFY_MASK);
-            gtk_widget_add_events(fs_window, GDK_KEY_PRESS_MASK);
-            gtk_widget_add_events(fs_window, GDK_VISIBILITY_NOTIFY_MASK);
-            gtk_widget_add_events(fs_window, GDK_STRUCTURE_MASK);
-            gtk_widget_add_events(fs_window, GDK_POINTER_MOTION_MASK);
-            g_signal_connect(G_OBJECT(fs_window), "key_press_event", G_CALLBACK(window_key_callback), NULL);
-            g_signal_connect(G_OBJECT(fs_window), "motion_notify_event", G_CALLBACK(motion_notify_callback), NULL);
-            gtk_widget_realize(fs_window);
+            if (fs_window == NULL) {
+                fs_window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
+                gtk_window_set_resizable(GTK_WINDOW(window), TRUE);
+                gtk_widget_add_events(fs_window, GDK_BUTTON_PRESS_MASK);
+                gtk_widget_add_events(fs_window, GDK_BUTTON_RELEASE_MASK);
+                gtk_widget_add_events(fs_window, GDK_KEY_PRESS_MASK);
+                gtk_widget_add_events(fs_window, GDK_KEY_RELEASE_MASK);
+                gtk_widget_add_events(fs_window, GDK_ENTER_NOTIFY_MASK);
+                gtk_widget_add_events(fs_window, GDK_LEAVE_NOTIFY_MASK);
+                gtk_widget_add_events(fs_window, GDK_KEY_PRESS_MASK);
+                gtk_widget_add_events(fs_window, GDK_VISIBILITY_NOTIFY_MASK);
+                gtk_widget_add_events(fs_window, GDK_STRUCTURE_MASK);
+                gtk_widget_add_events(fs_window, GDK_POINTER_MOTION_MASK);
+                g_signal_connect(G_OBJECT(fs_window), "key_press_event", G_CALLBACK(window_key_callback), NULL);
+                g_signal_connect(G_OBJECT(fs_window), "motion_notify_event", G_CALLBACK(motion_notify_callback), NULL);
+                gtk_widget_realize(fs_window);
 #ifdef GTK2_18_ENABLED
             gdk_window_ensure_native(gtk_widget_get_window(fs_window));
 #else
@@ -4225,6 +4220,7 @@ void menuitem_fs_callback(GtkMenuItem * menuitem, void
 #endif
 #endif
 #endif
+            }
 
             screen = gtk_window_get_screen(GTK_WINDOW(window));
             gtk_window_set_screen(GTK_WINDOW(fs_window), screen);
@@ -4257,6 +4253,10 @@ void menuitem_fs_callback(GtkMenuItem * menuitem, void
     }
 
     fullscreen = !fullscreen;
+    if (!fullscreen) {
+        hide_fs_controls();
+        gtk_window_present(GTK_WINDOW(window));
+    }
 
 }
 
@@ -7099,7 +7099,7 @@ void player_media_state_changed_callback(GtkButton * b
         icon_start = "media-playback-start-symbolic";
 #endif
 
-    gm_log(verbose, G_LOG_LEVEL_MESSAGE, "in media state change with state = %s dontplaynext = %i",
+    gm_log(verbose, G_LOG_LEVEL_DEBUG, "in media state change with state = %s dontplaynext = %i",
            gmtk_media_state_to_string(media_state), dontplaynext);
     switch (media_state) {
         // mplayer is dead, need the next item off the playlist
@@ -7639,6 +7639,7 @@ GtkWidget *create_window(gint windowid)
 #endif
     in_button = FALSE;
     last_movement_time = -1;
+    fs_controls_lock = g_mutex_new();
     window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
     gtk_window_set_title(GTK_WINDOW(window), _("GNOME MPlayer"));
     if (windowid > 0 && embedding_disabled == FALSE) {
@@ -8535,6 +8536,9 @@ void show_window(gint windowid)
                 gtk_window_resize(GTK_WINDOW(window), window_x, window_y);
                 gtk_widget_set_size_request(window, window_x, window_y);
             }
+        } else {
+            gtk_widget_set_size_request(window, -1, -1);
+            gtk_widget_set_size_request(GTK_WIDGET(tracker), 200, -1);
         }
 
     } else {
@@ -8859,13 +8863,17 @@ void show_fs_controls()
     GtkIconTheme *icon_theme = gtk_icon_theme_get_default();
 #endif
 
+
+    g_mutex_lock(fs_controls_lock);
     if (fs_controls == NULL && fullscreen) {
         fs_controls = gtk_window_new(GTK_WINDOW_POPUP);
         gtk_widget_add_events(fs_controls, GDK_ENTER_NOTIFY_MASK);
         gtk_widget_add_events(fs_controls, GDK_LEAVE_NOTIFY_MASK);
         g_signal_connect(G_OBJECT(fs_controls), "enter_notify_event", G_CALLBACK(fs_controls_entered), NULL);
         g_signal_connect(G_OBJECT(fs_controls), "leave_notify_event", G_CALLBACK(fs_controls_left), NULL);
-        g_object_ref(hbox);
+        gtk_window_set_transient_for(GTK_WINDOW(fs_controls), GTK_WINDOW(fs_window));
+    }
+    if (fs_controls != NULL && fullscreen) {
 #ifdef GTK3_ENABLED
         if (gtk_icon_theme_has_icon(icon_theme, "view-restore-symbolic")) {
             gtk_image_set_from_icon_name(GTK_IMAGE(image_fs), "view-restore-symbolic", button_size);
@@ -8875,18 +8883,21 @@ void show_fs_controls()
 #else
         gtk_image_set_from_stock(GTK_IMAGE(image_fs), GTK_STOCK_LEAVE_FULLSCREEN, button_size);
 #endif
-        gtk_container_remove(GTK_CONTAINER(controls_box), hbox);
-        gtk_container_add(GTK_CONTAINER(fs_controls), hbox);
-        gtk_window_set_transient_for(GTK_WINDOW(fs_controls), GTK_WINDOW(fs_window));
-        g_object_unref(hbox);
+        if (gtk_widget_get_parent(GTK_WIDGET(hbox)) == controls_box) {
+            g_object_ref(hbox);
+            gtk_container_remove(GTK_CONTAINER(controls_box), hbox);
+            gtk_container_add(GTK_CONTAINER(fs_controls), hbox);
+            g_object_unref(hbox);
+        }
         gtk_widget_show(fs_controls);
+#ifdef GTK3_ENABLED
+        gtk_widget_set_opacity(GTK_WIDGET(fs_controls), 0.75);
+#else
 #ifdef GTK2_12_ENABLED
         gtk_window_set_opacity(GTK_WINDOW(fs_controls), 0.75);
 #endif
-        //gm_log(verbose, G_LOG_LEVEL_DEBUG, "waiting for all events to drain");
-        //while (gtk_events_pending())
-        //    gtk_main_iteration();
-        // center fs_controls
+#endif
+
         screen = gtk_window_get_screen(GTK_WINDOW(window));
         gtk_window_set_screen(GTK_WINDOW(fs_controls), screen);
         gdk_screen_get_monitor_geometry(screen, gdk_screen_get_monitor_at_window(screen, gmtk_get_window(window)),
@@ -8897,6 +8908,8 @@ void show_fs_controls()
         y = rect.y + rect.height - alloc.height;
         gtk_window_move(GTK_WINDOW(fs_controls), x, y);
     }
+    g_mutex_unlock(fs_controls_lock);
+
 }
 
 void hide_fs_controls()
@@ -8905,8 +8918,8 @@ void hide_fs_controls()
     GtkIconTheme *icon_theme = gtk_icon_theme_get_default();
 #endif
 
+    g_mutex_lock(fs_controls_lock);
     if (fs_controls != NULL) {
-        g_object_ref(hbox);
 #ifdef GTK3_ENABLED
         if (gtk_icon_theme_has_icon(icon_theme, "view-fullscreen-symbolic")) {
             gtk_image_set_from_icon_name(GTK_IMAGE(image_fs), "view-fullscreen-symbolic", button_size);
@@ -8916,13 +8929,19 @@ void hide_fs_controls()
 #else
         gtk_image_set_from_stock(GTK_IMAGE(image_fs), GTK_STOCK_FULLSCREEN, button_size);
 #endif
-        gtk_container_remove(GTK_CONTAINER(fs_controls), hbox);
-        gtk_container_add(GTK_CONTAINER(controls_box), hbox);
-        g_object_unref(hbox);
-        //gm_log(verbose, G_LOG_LEVEL_DEBUG, "waiting for all events to drain");
-        //while (gtk_events_pending())
-        //    gtk_main_iteration();
-        gtk_widget_destroy(fs_controls);
-        fs_controls = NULL;
+        if (gtk_widget_get_parent(GTK_WIDGET(hbox)) == fs_controls) {
+            g_object_ref(hbox);
+            gtk_container_remove(GTK_CONTAINER(fs_controls), hbox);
+            gtk_container_add(GTK_CONTAINER(controls_box), hbox);
+            g_object_unref(hbox);
+        }
+        if (fullscreen) {
+            gtk_widget_hide(GTK_WIDGET(fs_controls));
+        } else {
+            gtk_widget_destroy(GTK_WIDGET(fs_controls));
+            fs_controls = NULL;
+        }
     }
+    g_mutex_unlock(fs_controls_lock);
+
 }
