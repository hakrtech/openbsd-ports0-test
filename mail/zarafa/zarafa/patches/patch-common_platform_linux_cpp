$OpenBSD: patch-common_platform_linux_cpp,v 1.8 2016/01/02 13:57:12 robert Exp $
--- common/platform.linux.cpp.orig	Sat Oct 31 00:03:13 2015
+++ common/platform.linux.cpp	Sat Jan  2 14:29:02 2016
@@ -59,6 +59,8 @@
 #include <cerrno>
 #include <climits>
 
+#include <signal.h>
+
 #include <string>
 #include <map>
 
@@ -69,7 +71,7 @@
 #define ICONV_CONST const
 #elif OPENBSD
 // bsd
-#define ICONV_CONST const
+#define ICONV_CONST
 #else
 // linux
 #define ICONV_CONST
@@ -94,22 +96,10 @@ HRESULT CoCreateGuid(LPGUID pNewGUID) {
 		return MAPI_E_INVALID_PARAMETER;
 
 #if HAVE_UUID_CREATE
-#ifdef OPENBSD
-	uuid_t *g = NULL;
-	void *vp = NULL;
-	size_t n = 0;
-	// error codes are not checked!
-	uuid_create(&g);
-	uuid_make(g, UUID_MAKE_V1);
-	uuid_export(g, UUID_FMT_BIN, &vp, &n);
-	memcpy(pNewGUID, &vp, UUID_LEN_BIN);
-	uuid_destroy(g);
-#else
 	uuid_t g;
 	uint32_t uid_ret;
 	uuid_create(&g, &uid_ret);
 	memcpy(pNewGUID, &g, sizeof(g));
-#endif // OPENBSD
 #else
 	uuid_t g;
 	uuid_generate(g);
@@ -168,18 +158,33 @@ void Sleep(unsigned int msec) {
 
 static void rand_fail(void)
 {
+#ifdef HAVE_GETENTROPY
+	fprintf(stderr, "getentropy() failed, this is fatal (%s)\n", strerror(errno));
+#else
 	fprintf(stderr, "Cannot access/use /dev/urandom, this is fatal (%s)\n", strerror(errno));
+#endif
 	kill(0, SIGTERM);
 	exit(1);
 }
-	
+
 void rand_get(char *p, int n)
 {
+#ifdef HAVE_GETENTROPY
+	while (n > 0) {
+		size_t len = n < 256 ? n : 256;
+		int rc = getentropy(p, n);
+		if (rc < 0)
+			rand_fail();
+
+		p += len;
+		n -= len;
+	}
+#else
 	int fd = open("/dev/urandom", O_RDONLY);
 
 	if (fd == -1)
 		rand_fail();
-	
+
 	// handle EINTR
 	while(n > 0)
 	{
@@ -199,10 +204,10 @@ void rand_get(char *p, int n)
 		p += rc;
 		n -= rc;
 	}
+	close(fd);
+#endif
+}
 
-		close(fd);
-	}
-	
 void rand_init() {
 	unsigned int seed = 0;
 	rand_get((char *)&seed, sizeof(seed));
