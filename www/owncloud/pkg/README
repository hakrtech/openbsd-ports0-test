$OpenBSD: README,v 1.22 2014/03/16 09:58:10 ajacoutot Exp $

+-----------------------------------------------------------------------
| Running ${FULLPKGNAME} on OpenBSD
+-----------------------------------------------------------------------

ownCloud is installed under
    ${INSTDIR}

Post-installation instructions
==============================
With Apache, AllowOverride settings are required on the ${INSTDIR}
directory. You can configure this as follows:
    # ln -sf /var/www/conf/modules.sample/owncloud.conf /var/www/conf/modules

"allow_url_fopen" needs to be enabled in PHP using _one_ of the
following methods:
    1. ${SYSCONFDIR}/php-${MODPHP_VERSION}.ini
    allow_url_fopen = On
    2. /var/www/conf/httpd.conf (main server or VirtualHost)
    php_admin_value allow_url_fopen 1

The maximum upload size for files can be modified in
    ${INSTDIR}/.htaccess

When not using Apache, make _sure_ to set the data directory to a
location outside of the document root.

ownCloud attempts to use the UTF-8 locale, which does not work inside
the /var/www chroot by default. This causes warning messages in
ownCloud's admin configuration page and log. To prevent this problem,
run the following as root:
  # mkdir -p /var/www/usr/share/locale/UTF-8/
  # cp /usr/share/locale/UTF-8/LC_CTYPE \
          /var/www/usr/share/locale/UTF-8/

Database Configuration
----------------------
ownCloud can work with a PostgreSQL, MySQL or SQLite3 database.
Support for SQLite3 is included with the main php package; to use
another database, the corresponding package needs to be installed
*before* setting up ownCloud (the web server will also need to be
restarted to detect the new PHP module):
    php-pdo_pgsql or php-pdo_mysql

Configuration is done under:
    ${INSTDIR}/config/config.php
When running chrooted, /var/www must be stripped from paths.

Cron job
--------
ownCloud needs to run background jobs on a regular basis. By default, it
will execute one task with each page loaded ("AJAX" option in the admin
interface).
The prefered way is to use a cron(8) job instead. Two options are
available and both require to edit the web server user's crontab(5).
e.g. "crontab -u www -e"
(swap "www" with the user the web server runs as)

-> "Webcron" (works in chroot)
*/15	*	*	*	*	/usr/bin/ftp -Vo - http://<hostname>/owncloud/cron.php >/dev/null

-> "Cron" (does *not* work in chroot)
*/15	*	*	*	*	${MODPHP_BIN} -f ${INSTDIR}/cron.php

LDAP User Backend
-----------------
If the LDAP user backend is enabled, the "php-ldap" package will need to
be installed.

Finishing and validating the installation
-----------------------------------------
Make sure the web server can resolve its hostname (e.g. if chrooted, by
creating /var/www/etc/hosts).

Accessing http://<hostname>/owncloud with a Web browser will finish the
installation and create a new admin user.

Updating
========
Before updating to a new release, read:
    http://owncloud.org/support/upgrade/

When using a PostgreSQL or MySQL, the corresponding MDB2 php package
must be installed to properly upgrade the database:
    php-pgsql or php-mysql

WebDAV access
=============
The personal WebDAV share can be accessed using the following URL (e.g.
with Nautilus, Thunar or Doplhin) and the corresponding user and
password for the share:
    http://<hostname>/owncloud/remote.php/webdav/

NOTE that it is highly recommended to use SSL on the webserver so that
access is done over https instead of http.

Synchronization
===============
The "ocsync" package (net/ocsync) can be installed to synchronize local
files with ownCloud. e.g.
    $ ocsync /path/to/localdir ownclouds://<username>:<password>@<hostname>/files/webdav.php/remotedir/

Encryption app and chroot
=========================

To provide server side-encryption, the "Encryption" app can be enabled
in the ownCloud admin interface. When running a chrooted web server,
some manual steps are required to make it work.

openssl(1)
----------
The openssl binary and dependent libraries must be installed in the
chroot. As root:
    mkdir /var/www/etc
    mkdir -p /var/www/usr/{lib,libexec,sbin}
    cp /usr/sbin/openssl /var/www/usr/sbin/
    cp /etc/ssl/openssl.cnf /var/www/etc/ssl/openssl.cnf # edit accordingly
    for i in $(ldd /usr/sbin/openssl | grep 'lib/' | awk '{ print $7 }'); do
    > cp -p $i /var/www$i
    > done

Make sure to update the openssl binary and libraries in the chroot
whenever they get updated on the system.

Apps and dependencies
=====================
To keep dependencies to a minimum, not all dependencies for all
installed apps are enforced. It is the job of the administrator to
manually install required packages according to the non-default apps he
wants to enable.
