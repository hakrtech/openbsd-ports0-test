$OpenBSD: patch-lib_src_facts_posix_networking_resolver_cc,v 1.1 2016/05/30 12:34:25 jasper Exp $

https://github.com/puppetlabs/facter/commit/2eaab8e41d8e0c3c5b14d5597d5c44ae2b7c241d
https://github.com/puppetlabs/facter/commit/01d2705464471277839c800fca25e4bf4d1c8db6

--- lib/src/facts/posix/networking_resolver.cc.orig	Tue Jul 21 19:31:28 2015
+++ lib/src/facts/posix/networking_resolver.cc	Mon May 30 14:28:22 2016
@@ -60,21 +60,33 @@ namespace facter { namespace facts { namespace posix {
     {
         data result;
 
-        // Get the hostname
+        // Get the maximum size of the host name
         int size = sysconf(_SC_HOST_NAME_MAX);
-        vector<char> name(size == -1 ? 1024 : size);
-        if (gethostname(name.data(), name.size()) != 0) {
+        if (size <= 0) {
+            size = 1024;
+        }
+        // Get the hostname (+1 to ensure a null is returned on platforms where maximum truncation may occur)
+        vector<char> name(size + 1);
+        if (gethostname(name.data(), size) != 0) {
             LOG_WARNING("gethostname failed: %1% (%2%): hostname is unavailable.", strerror(errno), errno);
         } else {
-            // Use everything up to the first period
-            result.hostname = name.data();
-            auto pos = result.hostname.find('.');
-            if (pos != string::npos) {
-                result.hostname = result.hostname.substr(0, pos);
+            // Check for fully-qualified hostname
+            auto it = find(name.begin(), name.end(), '.');
+            if (it != name.end()) {
+                LOG_DEBUG("using the FQDN returned by gethostname: %1%.", name.data());
+                result.hostname.assign(name.begin(), it);
+                if (++it != name.end()) {
+                    // Use the remainder of the string, up to the first null character
+                    result.domain = &*it;
+                }
+            } else {
+                // Not fully qualified; just set hostname
+                result.hostname = name.data();
             }
         }
 
-        if (!result.hostname.empty()) {
+        // If the hostname was not already fully qualified, attempt to resolve it
+        if (result.domain.empty() && !result.hostname.empty()) {
             // Retrieve the FQDN by resolving the hostname
             scoped_addrinfo info(result.hostname);
             if (info.result() != 0 && info.result() != EAI_NONAME) {
@@ -105,7 +117,7 @@ namespace facter { namespace facts { namespace posix {
                     result.domain.assign(parts[1].begin(), parts[1].end());
                     return false;
                 }
-                if (parts[0] == boost::as_literal("search")) {
+                if (search.empty() && parts[0] == boost::as_literal("search")) {
                     // Found a "search" entry, but keep looking for other domain entries
                     // We use the first search domain as the domain.
                     search.assign(parts[1].begin(), parts[1].end());
