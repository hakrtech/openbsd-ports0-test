$OpenBSD: patch-src_pty_c,v 1.8 2013/05/29 21:50:30 ajacoutot Exp $

From 4ab8de471e5dea5f58873abd5cc4a24feaa7210b Mon Sep 17 00:00:00 2001
From: Christian Persch <chpe@gnome.org>
Date: Sat, 25 May 2013 16:04:29 +0000
Subject: pty: Add a spwan flag to not inherit the parent environment

Use posix_openpt(3), we don't have /dev/ptmx.

--- src/pty.c.orig	Wed May 29 23:04:54 2013
+++ src/pty.c	Wed May 29 23:04:49 2013
@@ -412,13 +412,17 @@ __vte_pty_get_argv (const char *command,
 /*
  * __vte_pty_merge_environ:
  * @envp: environment vector
+ * @term_value: the value for the TERM env variable, or %NULL
+ * @inherit: whether to use the parent environment
  *
  * Merges @envp to the parent environment, and returns a new environment vector.
  *
  * Returns: a newly allocated string array. Free using g_strfreev()
  */
 static gchar **
-__vte_pty_merge_environ (char **envp, const char *term_value)
+__vte_pty_merge_environ (char **envp,
+                         const char *term_value,
+                         gboolean inherit)
 {
 	GHashTable *table;
         GHashTableIter iter;
@@ -429,13 +433,15 @@ __vte_pty_merge_environ (char **envp, const char *term
 
 	table = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
 
-	parent_environ = g_listenv ();
-	for (i = 0; parent_environ[i] != NULL; i++) {
-		g_hash_table_replace (table,
-			              g_strdup (parent_environ[i]),
-				      g_strdup (g_getenv (parent_environ[i])));
+	if (inherit) {
+		parent_environ = g_listenv ();
+		for (i = 0; parent_environ[i] != NULL; i++) {
+			g_hash_table_replace (table,
+				              g_strdup (parent_environ[i]),
+					      g_strdup (g_getenv (parent_environ[i])));
+		}
+		g_strfreev (parent_environ);
 	}
-	g_strfreev (parent_environ);
 
 	if (envp != NULL) {
 		for (i = 0; envp[i] != NULL; i++) {
@@ -537,6 +543,7 @@ __vte_pty_spawn (VtePty *pty,
 	VtePtyPrivate *priv = pty->priv;
         VtePtyChildSetupData *data = &priv->child_setup_data;
 	gboolean ret = TRUE;
+        gboolean inherit_envv;
         char **envp2;
         gint i;
         GError *err = NULL;
@@ -548,8 +555,11 @@ __vte_pty_spawn (VtePty *pty,
          */
         spawn_flags &= ~G_SPAWN_LEAVE_DESCRIPTORS_OPEN;
 
+        inherit_envv = (spawn_flags & VTE_SPAWN_NO_PARENT_ENVV) == 0;
+        spawn_flags &= ~VTE_SPAWN_NO_PARENT_ENVV;
+
         /* add the given environment to the childs */
-        envp2 = __vte_pty_merge_environ (envv, pty->priv->term);
+        envp2 = __vte_pty_merge_environ (envv, pty->priv->term, inherit_envv);
 
         _VTE_DEBUG_IF (VTE_DEBUG_MISC) {
                 g_printerr ("Spawing command:\n");
@@ -852,11 +862,7 @@ _vte_pty_getpt(GError **error)
 	/* Call the system's function for allocating a pty. */
 	fd = getpt();
 #else
-	/* Try to allocate a pty by accessing the pty master multiplex. */
-	fd = open("/dev/ptmx", O_RDWR | O_NOCTTY);
-	if ((fd == -1) && (errno == ENOENT)) {
-		fd = open("/dev/ptc", O_RDWR | O_NOCTTY); /* AIX */
-	}
+	fd = posix_openpt(O_RDWR | O_NOCTTY);
 #endif
         if (fd == -1) {
                 g_set_error (error, VTE_PTY_ERROR,
