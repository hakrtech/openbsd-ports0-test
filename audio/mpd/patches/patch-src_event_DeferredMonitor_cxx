$OpenBSD: patch-src_event_DeferredMonitor_cxx,v 1.1 2014/05/06 10:49:23 dcoppa Exp $

commit 0efb67b51e0d9d34c65bbdbd9df567a8a991cc4c
Author: Max Kellermann <max@duempel.org>
Date:   Sat Apr 26 22:11:23 2014 +0200

DeferredMonitor: fix race condition when using GLib event loop

Turns out the lock-free code using atomics was not thread-safe. The
given callback could be invoked by GLib before the source_id attribute
was assigned. This commit changes the DeferredMonitor class to use
a Mutex to block the event loop until source_id is assigned. This
bug does not exist in the 0.19 branch because it does not use the
GLib main loop anymore.

--- src/event/DeferredMonitor.cxx.orig	Wed Dec 11 20:51:53 2013
+++ src/event/DeferredMonitor.cxx	Tue Apr 29 11:32:48 2014
@@ -27,9 +27,11 @@ DeferredMonitor::Cancel()
 #ifdef USE_EPOLL
 	pending = false;
 #else
-	const auto id = source_id.exchange(0);
-	if (id != 0)
-		g_source_remove(id);
+	const ScopeLock protect(mutex);
+	if (source_id != 0) {
+		g_source_remove(source_id);
+		source_id = 0;
+	}
 #endif
 }
 
@@ -40,10 +42,9 @@ DeferredMonitor::Schedule()
 	if (!pending.exchange(true))
 		fd.Write();
 #else
-	const unsigned id = loop.AddIdle(Callback, this);
-	const auto old_id = source_id.exchange(id);
-	if (old_id != 0)
-		g_source_remove(old_id);
+	const ScopeLock protect(mutex);
+	if (source_id == 0)
+		source_id = loop.AddIdle(Callback, this);
 #endif
 }
 
@@ -65,9 +66,16 @@ DeferredMonitor::OnSocketReady(unsigned)
 void
 DeferredMonitor::Run()
 {
-	const auto id = source_id.exchange(0);
-	if (id != 0)
-		RunDeferred();
+	{
+		const ScopeLock protect(mutex);
+		if (source_id == 0)
+			/* cancelled */
+			return;
+
+		source_id = 0;
+	}
+
+	RunDeferred();
 }
 
 gboolean
